##################################################################################################
#/////////////////////////////////////////////////////////////////////////////////////////////////
#head---------------------------------------------------------------------------------------------
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
##################################################################################################

#__::((odmkNormalize1.py))::__

#Fixed point 2's complement normalization - denormalization
#converts N-bit 2's complement data to a range of  [0.5,1]
#Currently uses log2 function to find shift amounts to scale data
#should be replaced in hardware with odmk special algorithm
#reverses the normalization to recover original number



##################################################################################################
#/////////////////////////////////////////////////////////////////////////////////////////////////
#main---------------------------------------------------------------------------------------------
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
##################################################################################################


#/////////////////////////////////////////////////////////////////////////////////////////////////
#odmkNormalize1 function begin-------------------------------------------------------------
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


from math import floor,log

def odmkNormalize1(x,nbits):
    ''' xnorm, k = odmkNormalize1(x,nbits)
        converts N-bit 2's complement data to a range of  [0.5,1]
        Determines the number of bits to shift x until leading bit is 1
        Returns the normalized value and the # of bits used to scale
    
        example, nbits=24
        range: -2^(N-1) <-> 2^(N-1) - 1
        range: -8388608 <-> 8388607
        
        x = 8388607.0    //max rep value: 2^23 - 1
        xnorm = 0.9999998807907104, k = 23
        
        x = -8388608.0    //min rep value: -2^23
        xnorm = 0.5, k = 24
        
        x = 77777.0
        xnorm = 0.5933914184570312, k = 17
    '''      
    

    k = floor(log(abs(x),2)+1)          #scaleFactor
    xnorm = abs(x)*2**-k
        
    return xnorm,k
    
    
#/////////////////////////////////////////////////////////////////////////////////////////////////
#odmkNormalize1 function end---------------------------------------------------------------
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


#/////////////////////////////////////////////////////////////////////////////////////////////////
#Main begin-------------------------------------------------------------------------
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

#example 1:
#assume 24 bit I/O

#example, nbits=24
#range: -2^(N-1) <-> 2^(N-1) - 1
#range: -8388608 <-> 8388607
        
#x = 8388607.0    //max rep value: 2^23 - 1
#xnorm = 0.9999998807907104, k = 23
        
#x = -8388608.0    //min rep value: -2^23
#xnorm = 0.5, k = 24
        
#x = 77777.0
#xnorm = 0.5933914184570312, k = 17

nbits_ex1 = 24
x1 = 8388607.0
x2 = -8388608.0
x3 = 77777.0

x1norm,k1 = odmkNormalize1(x1,nbits_ex1)

print 'x1 =',x1
print 'normalized x1 =',x1norm
print 'scaling bits =',k1


#/////////////////////////////////////////////////////////////////////////////////////////////////
#Main end-----------------------------------------------------------------------------------------
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\